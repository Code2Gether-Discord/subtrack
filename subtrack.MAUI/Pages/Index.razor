@page "/"

@using subtrack.MAUI.Services.Abstractions
@using subtrack.MAUI.Responses;
@using subtrack.MAUI.Utilities;
@using subtrack.MAUI.DateAndTimeProvider;
@inject ISubscriptionService subscriptionService
@inject IDateTimeProvider dateTimeProvider;

<div class="container text-center">
    <div class="row">
        <div class="col">
            <h6 class="pt-1">Monthly</h6>
        </div>
        <div class="col">
            <h5>@($"{_subscriptionsCost:C}")</h5>
        </div>
    </div>
</div>

<div class="container mt-2">
    @foreach (var sub in _subscriptionResponses)
    {
        <div id="subscription-card" class="card border-primary mb-3" style="max-width: 20rem;">
            <div class="card-body" style="padding-top: 10px; padding-bottom: 10px;">
                <div class="d-flex justify-content-between fs-5">
                    <div>@sub.Name</div>
                    <div class="text-right">@($"{sub.Cost:C}")</div>
                </div>
                <div class="d-flex justify-content-between fs-6">
                    <div class="text-left">
                        @if (sub.IsAutoPaid)
                        {
                            <i class="fa fa-repeat" aria-hidden="true"></i>
                        }
                    </div>
                    <div class="text-right">@GetDueDaysText(sub.DueDays)</div>
                </div>
            </div>
        </div>
    }
</div>

@code{
    private decimal _subscriptionsCost = 0;
    private IEnumerable<SubscriptionResponse> _subscriptionResponses;

    protected override async void OnInitialized()
    {
        var subscriptions = await subscriptionService.GetSubscriptions();
        _subscriptionsCost = SubscriptionsCalculator.GetTotalCost(subscriptions);
        _subscriptionResponses = SubscriptionMapper.ToResponses(subscriptions, dateTimeProvider)
                                                   .OrderBy(sub => sub.DueDays)
                                                   .ToList();
    }

    private string GetDueDaysText(int dueDays)
    {
        return dueDays switch
        {
            1 => "1 day",
            -1 => "1 day ago",
            0 => "today",
            < 0 => $"{Math.Abs(dueDays)} days ago",
            > 0 => $"{dueDays} days",
        };
    }
}