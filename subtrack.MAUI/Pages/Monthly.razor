@page "/monthly"
@inject subtrack.MAUI.Services.Abstractions.ISubscriptionService SubscriptionService
@inject subtrack.MAUI.Services.Abstractions.ISubscriptionsCalculator SubscriptionCalculator

<AddSubscriptionButton />

@foreach (var subMonth in _currentYearSubscriptionMonths)
{
    <SubscriptionMonthItem SubscriptionMonth=@subMonth />
}

<h6 class="text-center mt-3 mb-2">@(_currentMonthDate.AddYears(1).Year)</h6>

@foreach (var subMonth in _nextYearSubscriptionMonths)
{
    <SubscriptionMonthItem Year=@(_currentMonthDate.AddYears(1).Year) SubscriptionMonth=@subMonth />
}

<h6 class="text-center mt-3 mb-2">@(_currentMonthDate.AddYears(2).Year)</h6>

@foreach (var subMonth in _nextYearSubscriptionMonths)
{
    <SubscriptionMonthItem Year=@(_currentMonthDate.AddYears(2).Year) SubscriptionMonth=@subMonth />
}

@code {
    IEnumerable<Subscription> _subscriptions = new List<Subscription>();
    DateTime _currentMonthDate = DateTime.Now;

    IEnumerable<SubscriptionsMonthResponse> _currentYearSubscriptionMonths = null!;
    IEnumerable<SubscriptionsMonthResponse> _nextYearSubscriptionMonths = null!;
    IEnumerable<SubscriptionsMonthResponse> _twoYearsForwardSubscriptionMonths = null!;

    protected override async Task OnInitializedAsync()
    {
        _subscriptions = await SubscriptionService.GetAllAsync();

        var twoYearsForwardDate = _currentMonthDate.AddYears(2);
        var paymentsTwoYearsForward = SubscriptionCalculator.GetMonthlySubscriptionLists(_subscriptions, _currentMonthDate.FirstDayOfMonthDate(), twoYearsForwardDate.LastDayOfMonthDate());

        _currentYearSubscriptionMonths = paymentsTwoYearsForward.Where(m => m.MonthDate.Year == _currentMonthDate.Year).ToList();
        _nextYearSubscriptionMonths = paymentsTwoYearsForward.Where(m => m.MonthDate.Year == _currentMonthDate.AddYears(1).Year).ToList();
        _twoYearsForwardSubscriptionMonths = paymentsTwoYearsForward.Where(m => m.MonthDate.Year == _currentMonthDate.AddYears(2).Year).ToList();
    }
}