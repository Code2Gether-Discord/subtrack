@page "/monthly"
@using System.Globalization;

@inject subtrack.MAUI.Services.Abstractions.ISubscriptionService SubscriptionService

<h6 class="text-center">@_currentYear</h6>

@foreach (var subMonth in _currentYearSubscriptionMonths)
{
    <SubscriptionMonthItem SubscriptionMonth=@subMonth />
}

<h6 class="text-center">@(_currentYear + 1)</h6>

@foreach (var subMonth in _nextYearSubscriptionMonths)
{
    <SubscriptionMonthItem SubscriptionMonth=@subMonth />
}

@code {
    IEnumerable<Subscription> _subscriptions = new List<Subscription>();
    int _currentMonth = DateTime.Now.Month;
    int _currentYear = DateTime.Now.Year;

    IEnumerable<SubscriptionsMonthResponse> _currentYearSubscriptionMonths;
    IEnumerable<SubscriptionsMonthResponse> _nextYearSubscriptionMonths;

    protected override async Task OnInitializedAsync()
    {
        _subscriptions = (await SubscriptionService.GetSubscriptions()).OrderBy(s => s.LastPayment.Day).ToArray();

        (string Name, int Index)[] allMonths = DateTimeFormatInfo.CurrentInfo.MonthNames
            .Where(m => !string.IsNullOrWhiteSpace(m))
            .Select((name, index) => (name, index + 1)).ToArray();

        _currentYearSubscriptionMonths = GetSubscriptionsMonthResponses(allMonths, m => m.Index >= _currentMonth);
        _nextYearSubscriptionMonths = GetSubscriptionsMonthResponses(allMonths, m => m.Index < _currentMonth);
    }

    private IEnumerable<SubscriptionsMonthResponse> GetSubscriptionsMonthResponses((string Name, int Index)[] months, Func<(string Name, int Index), bool> monthSelector)
    {
        return months.Where(monthSelector).Select(m =>
        {
            // later on we send in the year, alt datetime
            var subscriptions = SubscriptionsCalculator.GetSubscriptionListByMonth(_subscriptions, m.Index);

            return new SubscriptionsMonthResponse
            {
                Subscriptions = subscriptions,
                Cost = SubscriptionsCalculator.GetTotalCost(subscriptions),
                MonthName = m.Name

            };
        }).ToArray();
    }
}