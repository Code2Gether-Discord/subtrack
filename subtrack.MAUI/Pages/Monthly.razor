@page "/monthly"
@using System.Globalization;
@using subtrack.MAUI.Shared;

@inject subtrack.MAUI.Services.Abstractions.ISubscriptionService SubscriptionService

<h6 class="pt-1 text-center">@currentYear</h6>

@foreach (var month in currentYearMonths)
{
    <SubscriptionMonthItem Subscriptions=@_subscriptions SubscriptionsCost=@_subscriptionsCost MonthName=@month.Name />
}

@if (nextYearMonths != null && nextYearMonths.Any())
{
    <h6 class="pt-1 text-center">@(currentYear + 1)</h6>

    @foreach (var month in nextYearMonths)
    {
        <SubscriptionMonthItem Subscriptions=@_subscriptions SubscriptionsCost=@_subscriptionsCost MonthName=@month.Name />
    }
}

@code {
    decimal _subscriptionsCost = 0;
    IEnumerable<Subscription> _subscriptions = new List<Subscription>();
    int currentMonth = DateTime.Now.Month;
    int currentYear = DateTime.Now.Year;

    IEnumerable<Month> currentYearMonths;
    IEnumerable<Month> nextYearMonths;

    class Month
    {
        public int Number { get; set; }
        public string Name { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        _subscriptions = await SubscriptionService.GetSubscriptions();
        _subscriptionsCost = SubscriptionsCalculator.GetMonthlyCost(_subscriptions);

        string[] allMonths = DateTimeFormatInfo.CurrentInfo.MonthNames;

        currentYearMonths = allMonths
                .Where(m => !string.IsNullOrEmpty(m))
                .Select((Value, Index) => new Month { Number = Index + 1, Name = Value })
                .Where(month => month.Number >= currentMonth)
                .ToList();

        nextYearMonths = allMonths
                            .Where(p => !string.IsNullOrEmpty(p))
                            .Select((Value, Index) => new Month { Number = Index + 1, Name = Value })
                            .Where(month => month.Number < currentMonth)
                            .ToList();
    }
}