@page "/CreateSubscription"
@page "/EditSubscription/{Id:int}"
@using System.Globalization;
@using subtrack.MAUI.Shared.Components
@using subtrack.MAUI.Shared.JsInterop;
@inject NavigationManager NavigationManager
@inject ISubscriptionService SubscriptionService
@implements IAsyncDisposable
<div class="d-flex justify-content-between" style="padding-bottom: 20px;">
    <BackButton Url="@ReturnUrl"></BackButton>
    <button type="submit" form="SubscriptionForm" class="btn btn-success">
        <i class="fa-solid fa-floppy-disk"></i>
    </button>
</div>

<EditForm id="SubscriptionForm" Model="@_subscription" OnValidSubmit="UpsertSubscriptionAsync">
    <div>
        <ValidationSummary />
        <DataAnnotationsValidator />
        <InputText class="form-control" placeholder="Service Name" @bind-Value="@_subscription.Name"></InputText>
    </div>
    <div class="input-group mb-3" style="padding-top: 15px;">
        <span class="input-group-text">@_currency</span>
        <input @ref="costInputElement" inputmode="numeric" @onclick="@HightlightHandler" class="form-control" placeholder="Cost" @bind-value="@_subscription.Cost"></input>
    </div>
    <div style="display: flex;">
        <label style="white-space: nowrap; padding-top: 5px; padding-right: 10px; font-size: 17px;">Billing Cycle </label>
    </div>
    <div class="flex-fill d-flex" style="padding-top: 10px;">
        <span class="me-4">every </span>
        <InputNumber class="form-control me-4" placeholder="Billing Interval" @bind-Value="@_subscription.BillingInterval" id="billingInterval" style=" flex: 2 1 6em"></InputNumber>
        <InputSelect @bind-Value="@_subscription.BillingOccurrence" class="form-control flex-grow-1">
            <option value="@BillingOccurrence.Week">@GetBillingOccurrenceDisplayText("Week")</option>
            <option value="@BillingOccurrence.Month">@GetBillingOccurrenceDisplayText("Month")</option>
            <option value="@BillingOccurrence.Year">@GetBillingOccurrenceDisplayText("Year")</option>
        </InputSelect>
    </div>
    <br />
    <div style="display: flex;" class="mt-2">
        <label style="white-space: nowrap; padding-top: 5px; padding-right: 10px; font-size: 17px;">Last Payment </label>
        <InputDate class="form-control" @bind-Value="@_subscription.LastPayment"></InputDate>
    </div>
    <div class="form-check form-switch" style="padding-top: 10px">
        <label class="form-check-label" for="autopaid">Auto Paid </label>
        <InputCheckbox class="form-check-input" id="autopaid" @bind-Value="@_subscription.IsAutoPaid"></InputCheckbox>
    </div>

    <div class="mt-2" style="display: flex; flex-direction: column;">
        <div class="d-flex">
            <label class="pe-2" style="white-space: nowrap; font-size: 17px; min-width: 162px;" for="backgroundColor">Primary Color</label>
            <input class="form-control px-1 py-1" style="max-width:60px" type="color" id="backgroundColor" list="backgroundPresets" value="@_subscription.PrimaryColor" @onchange="@UpdateBackgroundColor" />
            <datalist id="backgroundPresets">
                @foreach (var backgroundColor in backgroundColorOptions)
                {
                    <option value="@backgroundColor.ToLower()">@backgroundColor.ToLower()</option>
                }
            </datalist>
        </div>
        <div class="d-flex mt-2">
            <label class="pe-2" style="white-space: nowrap; font-size: 17px; min-width: 162px;" for="secondaryColor">Secondary Color</label>
            <input class="form-control px-1 py-1" style="max-width:60px"  type="color" value="@_subscription.SecondaryColor" id="secondaryColor" @onchange="UpdateSecondaryColor" />
        </div>
    </div>

    <div class="d-flex mt-2 mb-2">
        <label style="white-space: nowrap; padding-right: 10px; font-size: 17px;">Icon</label>
        <IconPicker Icons="@iconOptions" OnIconSelected="@SelectIcon" SelectedIcon="@_subscription.Icon" Color="@_subscription.SecondaryColor" />
    </div>
    <div class="form-group mt-2" style="padding-top: 10px;">
        <InputTextArea class="form-control" rows="3" placeholder="Description" @bind-Value="@_subscription.Description"></InputTextArea>
    </div>
    <br />
</EditForm>

@code {

    [Inject] public HighlightJsInterop HighlightJsInterop { get; set; }

    [Parameter]
    public int? Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string ReturnUrl { get; set; }

    string _currency = "";
    private ElementReference costInputElement;

    Subscription? _subscription = new()
    {
        BillingInterval = 1,
        BillingOccurrence = BillingOccurrence.Month,
        PrimaryColor = CssUtil.AvailableBackgroundColors.First(),
        SecondaryColor = CssUtil.DefaultSecondaryColor
    };

    private IEnumerable<string> backgroundColorOptions = CssUtil.AvailableBackgroundColors;
    private IEnumerable<string> iconOptions = CssUtil.AvailableIcons;

    protected override void OnInitialized()
    {
        RegionInfo ri = new RegionInfo(System.Threading.Thread.CurrentThread.CurrentUICulture.LCID);
        _currency = ri.ISOCurrencySymbol;
        _subscription.LastPayment = DateTime.Today;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            _subscription = await SubscriptionService.GetByIdIfExists(Id.Value);
        }
    }

    protected async Task HightlightHandler() => await HighlightJsInterop.HighLight(costInputElement);


    public async Task UpsertSubscriptionAsync()
    {
        if (Id == null)
        {
            await SubscriptionService.CreateSubscriptionAsync(_subscription);
            NavigationManager.NavigateTo($"Details/{_subscription.Id}?ReturnUrl={ReturnUrl}");

        }
        else
        {
            await SubscriptionService.Update(_subscription);
            NavigationManager.NavigateTo(ReturnUrl);

        }
    }
    public async ValueTask DisposeAsync()
    {
        await HighlightJsInterop.DisposeAsync();
    }

    private string GetBillingOccurrenceDisplayText(string billingOccurrence)
    {
        return billingOccurrence.ToQuantity(_subscription.BillingInterval, showQuantityAs: ShowQuantityAs.None);
    }

    private void UpdateBackgroundColor(ChangeEventArgs e) => _subscription.PrimaryColor = e.Value!.ToString();

    private void UpdateSecondaryColor(ChangeEventArgs e) => _subscription.SecondaryColor = e.Value!.ToString();

    private void SelectIcon(string selectedIcon) => _subscription.Icon = selectedIcon;
}